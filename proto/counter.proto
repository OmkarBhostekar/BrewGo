syntax = "proto3";

package brew.go.proto.counter;
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";
option go_package = "github.com/omkarbhostekar/brewgo/proto/gen";

service CounterService {
    rpc AddProduct (AddProductRequest) returns (Product) {
        option (google.api.http) = {
            post: "/v1/counter/product"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Product"]
            summary: "Create a add product."
            description: "Use this API to add a product."
        };
    }

    rpc UpdateProduct (UpdateProductRequest) returns (Product) {
        option (google.api.http) = {
            patch: "/v1/counter/product/{product_id}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Product"]
            summary: "Update a product."
            description: "Use this API to update a product."
        };
    }

    rpc DeleteProduct (DeleteProductRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/counter/product/{product_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Product"]
            summary: "Delete a product."
            description: "Use this API to delete a product."
        };
    }

    rpc GetProduct (GetProductRequest) returns (Product) {
        option (google.api.http) = {
            get: "/v1/counter/product/{product_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Product"]
            summary: "Get a product."
            description: "Use this API to get a product."
        };
    }

    rpc SearchProductsByName (SearchProductsByNameRequest) returns (SearchProductsByNameResponse) {
        option (google.api.http) = {
            get: "/v1/counter/product/search"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Product"]
            summary: "Search products by name."
            description: "Use this API to search products by name."
        };
    }

    rpc SearchProductsByCategory (SearchProductsByCategoryRequest) returns (SearchProductsByNameResponse) {
        option (google.api.http) = {
            get: "/v1/counter/product/category"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Product"]
            summary: "List products by category."
            description: "Use this API to list products by category."
        };
    }
}

message Product {
    int32 product_id = 1;
    string name = 2;
    string description = 3;
    float price = 4;
    string category = 5;
    bool is_available = 6;
    string item_type = 7;
}

message AddProductRequest {
    string name = 1;
    string description = 2;
    float price = 3;
    string category = 4;
    string item_type = 6;
}

message UpdateProductRequest {
    string product_id = 1;
    optional string name = 2;
    optional string description = 3;
    optional float price = 4;
    optional string category = 5;
    optional string item_type = 6;
    optional bool is_available = 7;
}

message DeleteProductRequest {
    string product_id = 1;
}

message GetProductRequest {
    string product_id = 1;
}

message SearchProductsByNameRequest {
    string name = 1;
    int32 page = 2;
    int32 page_size = 3;
}

message SearchProductsByNameResponse {
    repeated Product products = 1;
}

message SearchProductsByCategoryRequest {
    string category_name = 1;
    int32 page = 2;
    int32 page_size = 3;
}