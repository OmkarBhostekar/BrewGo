// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/omkarbhostekar/brewgo/services/product/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	counter "github.com/omkarbhostekar/brewgo/services/counter/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockStore) AddProduct(arg0 context.Context, arg1 counter.AddProductParams) (counter.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(counter.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockStoreMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockStore)(nil).AddProduct), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int32) (counter.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(counter.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// GetProductById mocks base method.
func (m *MockStore) GetProductById(arg0 context.Context, arg1 int32) (counter.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0, arg1)
	ret0, _ := ret[0].(counter.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockStoreMockRecorder) GetProductById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockStore)(nil).GetProductById), arg0, arg1)
}

// SearchProductsByCategory mocks base method.
func (m *MockStore) SearchProductsByCategory(arg0 context.Context, arg1 counter.SearchProductsByCategoryParams) ([]counter.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsByCategory", arg0, arg1)
	ret0, _ := ret[0].([]counter.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsByCategory indicates an expected call of SearchProductsByCategory.
func (mr *MockStoreMockRecorder) SearchProductsByCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsByCategory", reflect.TypeOf((*MockStore)(nil).SearchProductsByCategory), arg0, arg1)
}

// SearchProductsByName mocks base method.
func (m *MockStore) SearchProductsByName(arg0 context.Context, arg1 counter.SearchProductsByNameParams) ([]counter.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProductsByName", arg0, arg1)
	ret0, _ := ret[0].([]counter.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProductsByName indicates an expected call of SearchProductsByName.
func (mr *MockStoreMockRecorder) SearchProductsByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProductsByName", reflect.TypeOf((*MockStore)(nil).SearchProductsByName), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 counter.UpdateProductParams) (counter.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(counter.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}
