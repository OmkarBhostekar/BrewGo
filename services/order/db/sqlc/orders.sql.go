// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package orders

import (
	"context"
	"database/sql"
	"time"

	"github.com/shopspring/decimal"
)

const areAllOrderItemsReady = `-- name: AreAllOrderItemsReady :one
SELECT BOOL_AND(item_status = 'ready') 
FROM counter_order_items 
WHERE counter_order_id = $1
`

func (q *Queries) AreAllOrderItemsReady(ctx context.Context, counterOrderID int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, areAllOrderItemsReady, counterOrderID)
	var bool_and bool
	err := row.Scan(&bool_and)
	return bool_and, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO counter_orders(
    user_id,
    total_amount,
    payment_method
) VALUES (
    $1,
    $2,
    $3
) RETURNING id, user_id, order_date, total_amount, payment_method, order_status, created_at, updated_at
`

type CreateOrderParams struct {
	UserID        int32           `json:"user_id"`
	TotalAmount   decimal.Decimal `json:"total_amount"`
	PaymentMethod string          `json:"payment_method"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (CounterOrder, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.UserID, arg.TotalAmount, arg.PaymentMethod)
	var i CounterOrder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderDate,
		&i.TotalAmount,
		&i.PaymentMethod,
		&i.OrderStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO counter_order_items(
    counter_order_id,
    product_id,
    quantity,
    notes
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, counter_order_id, product_id, item_status, quantity, notes, created_at, updated_at
`

type CreateOrderItemParams struct {
	CounterOrderID int32          `json:"counter_order_id"`
	ProductID      int32          `json:"product_id"`
	Quantity       int32          `json:"quantity"`
	Notes          sql.NullString `json:"notes"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (CounterOrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.CounterOrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Notes,
	)
	var i CounterOrderItem
	err := row.Scan(
		&i.ID,
		&i.CounterOrderID,
		&i.ProductID,
		&i.ItemStatus,
		&i.Quantity,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM counter_orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM counter_order_items WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderDetailById = `-- name: GetOrderDetailById :many
SELECT 
    o.id AS order_id,
    o.user_id,
    o.order_date,
    o.total_amount,
    o.payment_method,
    o.order_status,
    o.created_at AS order_created_at,
    o.updated_at AS order_updated_at,
    oi.id AS item_id,
    oi.counter_order_id,
    oi.product_id,
    oi.item_status,
    oi.quantity,
    oi.notes,
    oi.created_at AS item_created_at,
    oi.updated_at AS item_updated_at,
    p.name AS product_name,
    p.price AS product_price
FROM counter_orders o
LEFT JOIN counter_order_items oi ON o.id = oi.counter_order_id
LEFT JOIN products p ON oi.product_id = p.id
WHERE o.id = $1
`

type GetOrderDetailByIdRow struct {
	OrderID        int32           `json:"order_id"`
	UserID         int32           `json:"user_id"`
	OrderDate      time.Time       `json:"order_date"`
	TotalAmount    decimal.Decimal `json:"total_amount"`
	PaymentMethod  string          `json:"payment_method"`
	OrderStatus    string          `json:"order_status"`
	OrderCreatedAt time.Time       `json:"order_created_at"`
	OrderUpdatedAt time.Time       `json:"order_updated_at"`
	ItemID         sql.NullInt32   `json:"item_id"`
	CounterOrderID sql.NullInt32   `json:"counter_order_id"`
	ProductID      sql.NullInt32   `json:"product_id"`
	ItemStatus     sql.NullString  `json:"item_status"`
	Quantity       sql.NullInt32   `json:"quantity"`
	Notes          sql.NullString  `json:"notes"`
	ItemCreatedAt  sql.NullTime    `json:"item_created_at"`
	ItemUpdatedAt  sql.NullTime    `json:"item_updated_at"`
	ProductName    sql.NullString  `json:"product_name"`
	ProductPrice   decimal.Decimal `json:"product_price"`
}

func (q *Queries) GetOrderDetailById(ctx context.Context, id int32) ([]GetOrderDetailByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderDetailById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderDetailByIdRow{}
	for rows.Next() {
		var i GetOrderDetailByIdRow
		if err := rows.Scan(
			&i.OrderID,
			&i.UserID,
			&i.OrderDate,
			&i.TotalAmount,
			&i.PaymentMethod,
			&i.OrderStatus,
			&i.OrderCreatedAt,
			&i.OrderUpdatedAt,
			&i.ItemID,
			&i.CounterOrderID,
			&i.ProductID,
			&i.ItemStatus,
			&i.Quantity,
			&i.Notes,
			&i.ItemCreatedAt,
			&i.ItemUpdatedAt,
			&i.ProductName,
			&i.ProductPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItemsByOrderId = `-- name: GetOrderItemsByOrderId :many
SELECT 
    coi.id, coi.counter_order_id, coi.product_id, coi.item_status, coi.quantity, coi.notes, coi.created_at, coi.updated_at,
    p.name as product_name,
    p.price as product_price
FROM counter_order_items coi
JOIN products p ON coi.product_id = p.id
WHERE coi.counter_order_id = $1
`

type GetOrderItemsByOrderIdRow struct {
	ID             int32           `json:"id"`
	CounterOrderID int32           `json:"counter_order_id"`
	ProductID      int32           `json:"product_id"`
	ItemStatus     string          `json:"item_status"`
	Quantity       int32           `json:"quantity"`
	Notes          sql.NullString  `json:"notes"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	ProductName    string          `json:"product_name"`
	ProductPrice   decimal.Decimal `json:"product_price"`
}

func (q *Queries) GetOrderItemsByOrderId(ctx context.Context, counterOrderID int32) ([]GetOrderItemsByOrderIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderId, counterOrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderItemsByOrderIdRow{}
	for rows.Next() {
		var i GetOrderItemsByOrderIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CounterOrderID,
			&i.ProductID,
			&i.ItemStatus,
			&i.Quantity,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductName,
			&i.ProductPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUserId = `-- name: GetOrdersByUserId :many
SELECT id, user_id, order_date, total_amount, payment_method, order_status, created_at, updated_at FROM counter_orders WHERE user_id = $1
`

func (q *Queries) GetOrdersByUserId(ctx context.Context, userID int32) ([]CounterOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CounterOrder{}
	for rows.Next() {
		var i CounterOrder
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OrderDate,
			&i.TotalAmount,
			&i.PaymentMethod,
			&i.OrderStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalAmountByOrderId = `-- name: GetTotalAmountByOrderId :one
SELECT SUM(quantity * price) as total_amount FROM counter_order_items coi
JOIN products p ON coi.product_id = p.id
WHERE coi.counter_order_id = $1
`

func (q *Queries) GetTotalAmountByOrderId(ctx context.Context, counterOrderID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalAmountByOrderId, counterOrderID)
	var total_amount int64
	err := row.Scan(&total_amount)
	return total_amount, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE counter_orders
SET 
    payment_method = COALESCE($2, payment_method),
    order_status = COALESCE($3, order_status),
    total_amount = COALESCE($4, total_amount),
    updated_at = now()
WHERE id = $1
RETURNING id, user_id, order_date, total_amount, payment_method, order_status, created_at, updated_at
`

type UpdateOrderParams struct {
	ID            int32           `json:"id"`
	PaymentMethod sql.NullString  `json:"payment_method"`
	OrderStatus   sql.NullString  `json:"order_status"`
	TotalAmount   decimal.Decimal `json:"total_amount"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (CounterOrder, error) {
	row := q.db.QueryRowContext(ctx, updateOrder,
		arg.ID,
		arg.PaymentMethod,
		arg.OrderStatus,
		arg.TotalAmount,
	)
	var i CounterOrder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OrderDate,
		&i.TotalAmount,
		&i.PaymentMethod,
		&i.OrderStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderItemStatus = `-- name: UpdateOrderItemStatus :one
UPDATE counter_order_items
    SET item_status = $2
    WHERE id = $1
RETURNING id, counter_order_id, product_id, item_status, quantity, notes, created_at, updated_at
`

type UpdateOrderItemStatusParams struct {
	ID         int32  `json:"id"`
	ItemStatus string `json:"item_status"`
}

func (q *Queries) UpdateOrderItemStatus(ctx context.Context, arg UpdateOrderItemStatusParams) (CounterOrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItemStatus, arg.ID, arg.ItemStatus)
	var i CounterOrderItem
	err := row.Scan(
		&i.ID,
		&i.CounterOrderID,
		&i.ProductID,
		&i.ItemStatus,
		&i.Quantity,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
