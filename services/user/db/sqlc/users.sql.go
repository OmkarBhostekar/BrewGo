// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package user

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    name,
    email,
    password,
    phone_number
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, name, email, password, phone_number, is_verified, role, created_at, password_changed_at
`

type CreateUserParams struct {
	Name        string `json:"name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.Role,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, name, email, password, phone_number, is_verified, role, created_at, password_changed_at FROM users WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.Role,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users 
SET
    password = COALESCE($2, password),
    name = COALESCE($3, name),
    email = COALESCE($4, email),
    phone_number = COALESCE($5, phone_number)
WHERE id = $1
RETURNING id, name, email, password, phone_number, is_verified, role, created_at, password_changed_at
`

type UpdateUserParams struct {
	ID          int32          `json:"id"`
	Password    sql.NullString `json:"password"`
	Name        sql.NullString `json:"name"`
	Email       sql.NullString `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Password,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.IsVerified,
		&i.Role,
		&i.CreatedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}
